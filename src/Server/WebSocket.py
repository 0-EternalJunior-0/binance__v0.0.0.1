import asyncio
import json
import websockets
from src.ConfigManager.ConfigManager import ConfigManager
from src.logger import logger


class ParserClient:
    def __init__(self, websocket_url):
        self.websocket_url = websocket_url
        self.config_manager = ConfigManager()

    async def connect(self):
        """
        –ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —ñ —Å–ª—É—Ö–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        """
        async with websockets.connect(self.websocket_url) as websocket:
            await logger.info("[‚úÖ] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
            try:
                while True:
                    message = await websocket.recv()
                    await self.handle_message(message)
            except websockets.exceptions.ConnectionClosed:
                await logger.info("[‚ö†] WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
            except Exception as e:
                await logger.error(f"[‚ùå] –ü–æ–º–∏–ª–∫–∞ WebSocket: {e}")

    async def handle_message(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞.
        """
        try:
            data = json.loads(message)
            if data.get("event") == "WEBHOOK_UPDATED":
                new_webhook = data.get("WEBHOOK_URL")
                if new_webhook:
                    await self.config_manager.update_value_in_file('WEBHOOK_URL', str(new_webhook))
                    await logger.info(f"[üîÑ] WEBHOOK_URL –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_webhook}")
            if data.get("event") == "SCAN_INTERVAL_UPDATED":
                new_scan_interval = data.get("scan_interval")
                if new_scan_interval:
                    await self.config_manager.update_value_in_file('scan_interval', new_scan_interval)
                    await logger.info(f"[üîÑ] scan_interval –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_scan_interval}")
            if data.get("event") == "LOG_DETAILS_UPDATED":
                new_log_details = str(data.get("Log_Details"))
                if new_log_details:
                    await self.config_manager.update_value_in_file('Log_Details', int(new_log_details))
                    await logger.info(f"[üîÑ] Log_Details –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_log_details}")
            if data.get("event") == "PROXY_UPDATED":
                new_proxy_list = data.get("proxy")
                if new_proxy_list or new_proxy_list == []:
                    await self.config_manager.set_proxy_list(new_proxy_list)
                    await logger.info(f"[üîÑ] proxy_list –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_proxy_list}")
        except json.JSONDecodeError:
            await logger.error("[‚ö†] –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message)

async def websocket_listener(parser_client):
    while True:  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–∏–∫–ª –∑–∞–º—ñ—Å—Ç—å —Ä–µ–∫—É—Ä—Å—ñ—ó
        try:
            await parser_client.connect()
            await logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞")

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ API WebSocket)
            await parser_client.subscribe()

            async for message in parser_client.listen():  # –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await logger.info(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")

        except Exception as e:
            await logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    ws_url = "ws://localhost:8000/ws"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    parser = ParserClient(ws_url)
    asyncio.run(parser.connect())
